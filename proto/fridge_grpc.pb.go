// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: fridge.proto

package fridgev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FridgeService_OpenFridge_FullMethodName          = "/fridge.FridgeService/OpenFridge"
	FridgeService_CloseFridge_FullMethodName         = "/fridge.FridgeService/CloseFridge"
	FridgeService_AddProduct_FullMethodName          = "/fridge.FridgeService/AddProduct"
	FridgeService_GetProduct_FullMethodName          = "/fridge.FridgeService/GetProduct"
	FridgeService_ListProducts_FullMethodName        = "/fridge.FridgeService/ListProducts"
	FridgeService_RemoveProduct_FullMethodName       = "/fridge.FridgeService/RemoveProduct"
	FridgeService_IsExpiredProduct_FullMethodName    = "/fridge.FridgeService/IsExpiredProduct"
	FridgeService_GetExpiringProducts_FullMethodName = "/fridge.FridgeService/GetExpiringProducts"
)

// FridgeServiceClient is the client API for FridgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FridgeServiceClient interface {
	OpenFridge(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenResponse, error)
	CloseFridge(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error)
	AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*Product, error)
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*Product, error)
	ListProducts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Product], error)
	RemoveProduct(ctx context.Context, in *RemoveProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	IsExpiredProduct(ctx context.Context, in *IsExpiredProductRequest, opts ...grpc.CallOption) (*IsExpiredProductResponse, error)
	GetExpiringProducts(ctx context.Context, in *ExpiringProductsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Product], error)
}

type fridgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFridgeServiceClient(cc grpc.ClientConnInterface) FridgeServiceClient {
	return &fridgeServiceClient{cc}
}

func (c *fridgeServiceClient) OpenFridge(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenResponse)
	err := c.cc.Invoke(ctx, FridgeService_OpenFridge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fridgeServiceClient) CloseFridge(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseResponse)
	err := c.cc.Invoke(ctx, FridgeService_CloseFridge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fridgeServiceClient) AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Product)
	err := c.cc.Invoke(ctx, FridgeService_AddProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fridgeServiceClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Product)
	err := c.cc.Invoke(ctx, FridgeService_GetProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fridgeServiceClient) ListProducts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Product], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FridgeService_ServiceDesc.Streams[0], FridgeService_ListProducts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, Product]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FridgeService_ListProductsClient = grpc.ServerStreamingClient[Product]

func (c *fridgeServiceClient) RemoveProduct(ctx context.Context, in *RemoveProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FridgeService_RemoveProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fridgeServiceClient) IsExpiredProduct(ctx context.Context, in *IsExpiredProductRequest, opts ...grpc.CallOption) (*IsExpiredProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsExpiredProductResponse)
	err := c.cc.Invoke(ctx, FridgeService_IsExpiredProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fridgeServiceClient) GetExpiringProducts(ctx context.Context, in *ExpiringProductsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Product], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FridgeService_ServiceDesc.Streams[1], FridgeService_GetExpiringProducts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExpiringProductsRequest, Product]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FridgeService_GetExpiringProductsClient = grpc.ServerStreamingClient[Product]

// FridgeServiceServer is the server API for FridgeService service.
// All implementations must embed UnimplementedFridgeServiceServer
// for forward compatibility.
type FridgeServiceServer interface {
	OpenFridge(context.Context, *OpenRequest) (*OpenResponse, error)
	CloseFridge(context.Context, *CloseRequest) (*CloseResponse, error)
	AddProduct(context.Context, *AddProductRequest) (*Product, error)
	GetProduct(context.Context, *GetProductRequest) (*Product, error)
	ListProducts(*emptypb.Empty, grpc.ServerStreamingServer[Product]) error
	RemoveProduct(context.Context, *RemoveProductRequest) (*emptypb.Empty, error)
	IsExpiredProduct(context.Context, *IsExpiredProductRequest) (*IsExpiredProductResponse, error)
	GetExpiringProducts(*ExpiringProductsRequest, grpc.ServerStreamingServer[Product]) error
	mustEmbedUnimplementedFridgeServiceServer()
}

// UnimplementedFridgeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFridgeServiceServer struct{}

func (UnimplementedFridgeServiceServer) OpenFridge(context.Context, *OpenRequest) (*OpenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenFridge not implemented")
}
func (UnimplementedFridgeServiceServer) CloseFridge(context.Context, *CloseRequest) (*CloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseFridge not implemented")
}
func (UnimplementedFridgeServiceServer) AddProduct(context.Context, *AddProductRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedFridgeServiceServer) GetProduct(context.Context, *GetProductRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedFridgeServiceServer) ListProducts(*emptypb.Empty, grpc.ServerStreamingServer[Product]) error {
	return status.Errorf(codes.Unimplemented, "method ListProducts not implemented")
}
func (UnimplementedFridgeServiceServer) RemoveProduct(context.Context, *RemoveProductRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProduct not implemented")
}
func (UnimplementedFridgeServiceServer) IsExpiredProduct(context.Context, *IsExpiredProductRequest) (*IsExpiredProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsExpiredProduct not implemented")
}
func (UnimplementedFridgeServiceServer) GetExpiringProducts(*ExpiringProductsRequest, grpc.ServerStreamingServer[Product]) error {
	return status.Errorf(codes.Unimplemented, "method GetExpiringProducts not implemented")
}
func (UnimplementedFridgeServiceServer) mustEmbedUnimplementedFridgeServiceServer() {}
func (UnimplementedFridgeServiceServer) testEmbeddedByValue()                       {}

// UnsafeFridgeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FridgeServiceServer will
// result in compilation errors.
type UnsafeFridgeServiceServer interface {
	mustEmbedUnimplementedFridgeServiceServer()
}

func RegisterFridgeServiceServer(s grpc.ServiceRegistrar, srv FridgeServiceServer) {
	// If the following call pancis, it indicates UnimplementedFridgeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FridgeService_ServiceDesc, srv)
}

func _FridgeService_OpenFridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FridgeServiceServer).OpenFridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FridgeService_OpenFridge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FridgeServiceServer).OpenFridge(ctx, req.(*OpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FridgeService_CloseFridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FridgeServiceServer).CloseFridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FridgeService_CloseFridge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FridgeServiceServer).CloseFridge(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FridgeService_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FridgeServiceServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FridgeService_AddProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FridgeServiceServer).AddProduct(ctx, req.(*AddProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FridgeService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FridgeServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FridgeService_GetProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FridgeServiceServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FridgeService_ListProducts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FridgeServiceServer).ListProducts(m, &grpc.GenericServerStream[emptypb.Empty, Product]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FridgeService_ListProductsServer = grpc.ServerStreamingServer[Product]

func _FridgeService_RemoveProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FridgeServiceServer).RemoveProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FridgeService_RemoveProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FridgeServiceServer).RemoveProduct(ctx, req.(*RemoveProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FridgeService_IsExpiredProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsExpiredProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FridgeServiceServer).IsExpiredProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FridgeService_IsExpiredProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FridgeServiceServer).IsExpiredProduct(ctx, req.(*IsExpiredProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FridgeService_GetExpiringProducts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExpiringProductsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FridgeServiceServer).GetExpiringProducts(m, &grpc.GenericServerStream[ExpiringProductsRequest, Product]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FridgeService_GetExpiringProductsServer = grpc.ServerStreamingServer[Product]

// FridgeService_ServiceDesc is the grpc.ServiceDesc for FridgeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FridgeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fridge.FridgeService",
	HandlerType: (*FridgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenFridge",
			Handler:    _FridgeService_OpenFridge_Handler,
		},
		{
			MethodName: "CloseFridge",
			Handler:    _FridgeService_CloseFridge_Handler,
		},
		{
			MethodName: "AddProduct",
			Handler:    _FridgeService_AddProduct_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _FridgeService_GetProduct_Handler,
		},
		{
			MethodName: "RemoveProduct",
			Handler:    _FridgeService_RemoveProduct_Handler,
		},
		{
			MethodName: "IsExpiredProduct",
			Handler:    _FridgeService_IsExpiredProduct_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListProducts",
			Handler:       _FridgeService_ListProducts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetExpiringProducts",
			Handler:       _FridgeService_GetExpiringProducts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fridge.proto",
}
